diff -uNr /usr/lib/python2.7/site-packages/ovirt_iso_uploader/__main__.py ovirt_iso_uploader/__main__.py
--- /usr/lib/python2.7/site-packages/ovirt_iso_uploader/__main__.py	2017-11-29 00:22:52.000000000 +0800
+++ ovirt_iso_uploader/__main__.py	2018-01-03 11:10:49.111111826 +0800
@@ -36,6 +36,9 @@
 DEFAULT_IMAGES_DIR = 'images/11111111-1111-1111-1111-111111111111'
 NFS_MOUNT_OPTS = '-t nfs -o rw,sync,soft'
 NFS_UMOUNT_OPTS = '-t nfs -f '
+POSIXFS_MOUNT_TYPE = '-t ceph'
+POSIXFS_MOUNT_OPTS_FILTER = ['rw', 'name', 'secret']
+POSIXFS_UMOUNT_OPTS = '-t ceph -f '
 NFS_USER = 'vdsm'
 NUMERIC_VDSM_ID = 36
 SUDO = '/usr/bin/sudo'
@@ -597,9 +600,10 @@
     def get_host_and_path_from_ISO_domain(self, isodomain):
         """
         Given a valid ISO storage domain, this method will return the
-        hostname/IP, UUID, and path to the domain in a 3 tuple.
+	storage domain UUID, domain type, address and path to the domain,
+        and mount options (if necessary) in a 5 tuple.
         Returns:
-          (host, id, path)
+          (sd_uuid, domain_type, address, path, mount_options)
         """
         if not self._initialize_api():
             sys.exit(ExitCodes.CRITICAL)
@@ -625,6 +629,9 @@
                     )
                     for host in hosts:
                         address = host.address
+		elif domain_type == 'posixfs':
+		    address = storage.address
+		    mount_options = storage.mount_options
                 else:
                     address = storage.address
                 path = storage.path
@@ -645,7 +652,10 @@
             logging.debug(
                 'id=%s address=%s path=%s' % (sd_uuid, address, path)
             )
-            return (sd_uuid, domain_type, address, path)
+            if domain_type == 'posixfs':
+		return (sd_uuid, domain_type, address, path, mount_options)
+	    else:
+		return (sd_uuid, domain_type, address, path, "")
         else:
             raise NEISODomain(
                 _("An ISO storage domain with a name of %s was not found.") %
@@ -672,6 +682,26 @@
         logging.debug('NFS mount command (%s)' % cmd)
         return cmd
 
+    def format_posixfs_command(self, address, export, dir, mount_options):
+	mount_options = mount_options.split(',')
+	tmp = [None] * len(mount_options)
+	for i in range(0, len(mount_options)):
+	    tmp[i] = mount_options[i]
+
+        output_mount_opts = ""
+        for i in range(0, len(mount_options)):
+ 	    mount_options[i] = mount_options[i].split('=')
+        for i in range(0, len(POSIXFS_MOUNT_OPTS_FILTER)):
+	    if mount_options[i][0] == POSIXFS_MOUNT_OPTS_FILTER[i]:
+		if output_mount_opts != "":
+		    output_mount_opts += ','
+		output_mount_opts += tmp[i]
+	output_mount_opts = "-o " + output_mount_opts
+
+	cmd = '%s %s %s:%s %s %s' % (MOUNT, POSIXFS_MOUNT_TYPE, address, export, dir, output_mount_opts)
+	logging.debug('cephfs mount command (%s)' % cmd)
+	return cmd
+
     def exists_nfs(self, file, uid, gid):
         """
         Check for file existence.  The file will be tested as the
@@ -1018,7 +1048,7 @@
                 raise Exception(
                     _('Unable to get ISO domain data')
                 )
-            (id, domain_type, address, path) = iso_domain_data
+            (id, domain_type, address, path, mount_options) = iso_domain_data
             remote_path = os.path.join(id, DEFAULT_IMAGES_DIR)
         elif self.configuration.get('nfs_server'):
             mnt = self.configuration.get('nfs_server')
@@ -1160,10 +1190,13 @@
                     ExitCodes.exit_code = ExitCodes.CRITICAL
                     logging.error(e)
         else:
-            # NFS support.
+            # posixfs and NFS support.
             tmpDir = tempfile.mkdtemp()
-            logging.debug('local NFS mount point is %s' % tmpDir)
-            cmd = self.format_nfs_command(address, path, tmpDir)
+            logging.debug('local mount point is %s' % tmpDir)
+	    if domain_type in ('posixfs', ):
+		cmd = self.format_posixfs_command(address, path, tmpDir, mount_options)
+	    else:
+                cmd = self.format_nfs_command(address, path, tmpDir)
             try:
                 self.caller.call(cmd)
                 getpwnam(NFS_USER)
@@ -1287,7 +1320,10 @@
                 logging.error(e)
             finally:
                 try:
-                    cmd = '%s %s %s' % (UMOUNT, NFS_UMOUNT_OPTS, tmpDir)
+		    if domain_type in ('posixfs', ):
+			cmd = '%s %s %s' % (UMOUNT, POSIXFS_UMOUNT_OPTS, tmpDir)
+		    else:
+                        cmd = '%s %s %s' % (UMOUNT, NFS_UMOUNT_OPTS, tmpDir)
                     logging.debug(cmd)
                     self.caller.call(cmd)
                     shutil.rmtree(tmpDir)
